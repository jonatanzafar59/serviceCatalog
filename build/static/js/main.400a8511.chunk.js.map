{"version":3,"sources":["Modal/index.js","config.js","index.js"],"names":["customStyles","content","top","left","right","bottom","marginRight","transform","Modal","setAppElement","App","_React$Component","Object","inherits","_super","createSuper","_this","classCallCheck","this","call","state","modalIsOpen","openModal","bind","assertThisInitialized","afterOpenModal","closeModal","createClass","key","value","setState","subtitle","style","color","_this2","react_default","a","createElement","pointerEvents","onClick","id","props","lib_default","isOpen","onAfterOpen","onRequestClose","contentLabel","ref","React","Component","NODE_KEY","CUSTOM_EMPTY_TYPE","SPECIAL_TYPE","EMPTY_EDGE_TYPE","SPECIAL_EDGE_TYPE","EmptyNodeShape","viewBox","width","height","cx","cy","r","CustomEmptyShape","xmlns","SpecialShape","PolyShape","d","SkinnyShape","console","log","x","y","rx","ry","SpecialChildShape","fill","config","EdgeTypes","emptyEdge","shape","shapeId","typeText","specialEdge","NodeSubtypes","specialChild","NodeTypes","empty","customEmpty","special","skinny","poly","sample","edges","handleText","source","target","type","nodes","title","subtype","Graph","_Component","renderNode","nodeRef","data","selected","hovered","className","xmlnsXlink","concat","xlinkHref","addStartNode","e","graph","Date","now","screenX","screenY","toConsumableArray","deleteStartNode","splice","handleChange","event","totalNodes","parseInt","makeItLarge","onUpdateNode","viewNode","i","getNodeIndex","onSelectNode","_event$target$id","includes","document","getElementById","click","onSelectEdge","viewEdge","onCreateNode","Math","random","onDeleteNode","nodeId","nodeArr","newEdges","filter","edge","onCreateEdge","sourceViewNode","targetViewNode","onSwapEdge","getEdgeIndex","JSON","parse","stringify","onDeleteEdge","onUndo","warn","onCopySelected","copiedNode","objectSpread2","onPasteSelected","newNode","forceUpdate","handleChangeLayoutEngineType","layoutEngineType","onSelectPanNode","GraphView","panToNode","customNodeRef","createRef","searchNode","findIndex","node","searchEdge","nodeKey","draggable","onDragEnd","main_min","showGraphControls","gridSize","gridDotSize","renderNodeText","nodeTypes","nodeConfig","nodeSubtypes","edgeTypes","readOnly","rootElement","ReactDOM","render","src_Graph"],"mappings":"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","file":"static/js/main.400a8511.chunk.js","sourcesContent":["import React from \"react\";\nimport Modal from \"react-modal\";\n\nconst customStyles = {\n  content: {\n    top: \"50%\",\n    left: \"50%\",\n    right: \"auto\",\n    bottom: \"auto\",\n    marginRight: \"-50%\",\n    transform: \"translate(-50%, -50%)\"\n  }\n};\n\nModal.setAppElement(\"#root\");\n\nclass App extends React.Component {\n  constructor() {\n    super();\n\n    this.state = {\n      modalIsOpen: false\n    };\n\n    this.openModal = this.openModal.bind(this);\n    this.afterOpenModal = this.afterOpenModal.bind(this);\n    this.closeModal = this.closeModal.bind(this);\n  }\n\n  openModal() {\n    this.setState({ modalIsOpen: true });\n  }\n\n  afterOpenModal() {\n    // references are now sync'd and can be accessed.\n    this.subtitle.style.color = \"#f00\";\n  }\n\n  closeModal() {\n    this.setState({ modalIsOpen: false });\n  }\n\n  render() {\n    return (\n      <div style={{ pointerEvents: \"all\" }}>\n        <button\n          onClick={this.openModal}\n          id={this.props.id}\n          style={{ pointerEvents: \"all\" }}\n        >\n          Open Modal\n        </button>\n        <Modal\n          isOpen={this.state.modalIsOpen}\n          onAfterOpen={this.afterOpenModal}\n          onRequestClose={this.closeModal}\n          style={customStyles}\n          contentLabel=\"Example Modal\"\n        >\n          <h2 ref={subtitle => (this.subtitle = subtitle)}>Hello</h2>\n          <button onClick={this.closeModal}>close</button>\n          <div>I am a modal</div>\n          <form>\n            <input />\n            <button>tab navigation</button>\n            <button>stays</button>\n            <button>inside</button>\n            <button>the modal</button>\n          </form>\n        </Modal>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// @flow\r\n/*\r\n  Copyright(c) 2018 Uber Technologies, Inc.\r\n  Licensed under the Apache License, Version 2.0 (the \"License\");\r\n  you may not use this file except in compliance with the License.\r\n  You may obtain a copy of the License at\r\n          http://www.apache.org/licenses/LICENSE-2.0\r\n  Unless required by applicable law or agreed to in writing, software\r\n  distributed under the License is distributed on an \"AS IS\" BASIS,\r\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n  See the License for the specific language governing permissions and\r\n  limitations under the License.\r\n*/\r\n\r\n/*\r\n  Example config for GraphView component\r\n*/\r\nimport React from \"react\";\r\n\r\nexport const NODE_KEY = \"id\"; // Key used to identify nodes\r\n\r\n// These keys are arbitrary (but must match the config)\r\n// However, GraphView renders text differently for empty types\r\n// so this has to be passed in if that behavior is desired.\r\nexport const EMPTY_TYPE = \"empty\";\r\nexport const CUSTOM_EMPTY_TYPE = \"customEmpty\"; // Empty node type\r\nexport const POLY_TYPE = \"poly\";\r\nexport const SPECIAL_TYPE = \"special\";\r\nexport const SKINNY_TYPE = \"skinny\";\r\nexport const SPECIAL_CHILD_SUBTYPE = \"specialChild\";\r\nexport const EMPTY_EDGE_TYPE = \"emptyEdge\";\r\nexport const SPECIAL_EDGE_TYPE = \"specialEdge\";\r\n\r\nexport const nodeTypes = [\r\n  EMPTY_TYPE,\r\n  CUSTOM_EMPTY_TYPE,\r\n  POLY_TYPE,\r\n  SPECIAL_TYPE,\r\n  SKINNY_TYPE\r\n];\r\nexport const edgeTypes = [EMPTY_EDGE_TYPE, SPECIAL_EDGE_TYPE];\r\n\r\nexport const nodeSubTypes = [SPECIAL_CHILD_SUBTYPE];\r\n\r\nconst EmptyNodeShape = (\r\n  <symbol viewBox=\"0 0 154 154\" width=\"154\" height=\"154\" id=\"emptyNode\">\r\n    <circle cx=\"77\" cy=\"77\" r=\"76\" />\r\n  </symbol>\r\n);\r\n\r\nconst CustomEmptyShape = (\r\n  <symbol viewBox=\"0 0 200 200\" id=\"customEmpty\">\r\n    <circle cx=\"100\" cy=\"100\" r=\"50\" />\r\n    <g>\r\n      <foreignObject width=\"100%\" height=\"100%\">\r\n        <div xmlns=\"http://www.w3.org/1999/xhtml\">test</div>\r\n      </foreignObject>\r\n    </g>\r\n  </symbol>\r\n);\r\n\r\nconst SpecialShape = (\r\n  <symbol viewBox=\"-27 0 154 154\" id=\"special\" width=\"154\" height=\"154\">\r\n    <rect transform=\"translate(50) rotate(45)\" width=\"109\" height=\"109\" />\r\n  </symbol>\r\n);\r\n\r\nconst PolyShape = (\r\n  <symbol viewBox=\"0 0 88 72\" id=\"poly\" width=\"88\" height=\"88\">\r\n    <path d=\"M 0 36 18 0 70 0 88 36 70 72 18 72Z\" />\r\n  </symbol>\r\n);\r\n\r\nconst SkinnyShape = (\r\n  <symbol\r\n    viewBox=\"0 0 154 54\"\r\n    width=\"154\"\r\n    height=\"54\"\r\n    id=\"skinny\"\r\n    onClick={() => console.log(\"tim\")}\r\n  >\r\n    <rect x=\"0\" y=\"0\" rx=\"2\" ry=\"2\" width=\"154\" height=\"54\" />\r\n  </symbol>\r\n);\r\n\r\nconst SpecialChildShape = (\r\n  <symbol viewBox=\"0 0 154 154\" id=\"specialChild\">\r\n    <rect\r\n      x=\"2.5\"\r\n      y=\"0\"\r\n      width=\"154\"\r\n      height=\"154\"\r\n      fill=\"rgba(30, 144, 255, 0.12)\"\r\n    />\r\n  </symbol>\r\n);\r\n\r\nconst EmptyEdgeShape = (\r\n  <symbol viewBox=\"0 0 50 50\" id=\"emptyEdge\">\r\n    <circle cx=\"25\" cy=\"25\" r=\"8\" fill=\"currentColor\" />\r\n  </symbol>\r\n);\r\n\r\nconst SpecialEdgeShape = (\r\n  <symbol viewBox=\"0 0 50 50\" id=\"specialEdge\">\r\n    <rect\r\n      transform=\"rotate(45)\"\r\n      x=\"27.5\"\r\n      y=\"-7.5\"\r\n      width=\"15\"\r\n      height=\"15\"\r\n      fill=\"currentColor\"\r\n    />\r\n  </symbol>\r\n);\r\n\r\nexport default {\r\n  EdgeTypes: {\r\n    emptyEdge: {\r\n      shape: EmptyEdgeShape,\r\n      shapeId: \"#emptyEdge\",\r\n      typeText: \"Empty\"\r\n    },\r\n    specialEdge: {\r\n      shape: SpecialEdgeShape,\r\n      shapeId: \"#specialEdge\"\r\n    }\r\n  },\r\n  NodeSubtypes: {\r\n    specialChild: {\r\n      shape: SpecialChildShape,\r\n      shapeId: \"#specialChild\"\r\n    }\r\n  },\r\n  NodeTypes: {\r\n    empty: {\r\n      shape: EmptyNodeShape,\r\n      shapeId: \"#empty\",\r\n      typeText: \"None\"\r\n    },\r\n    customEmpty: {\r\n      shape: CustomEmptyShape,\r\n      shapeId: \"#customEmpty\",\r\n      typeText: \"None\"\r\n    },\r\n    special: {\r\n      shape: SpecialShape,\r\n      shapeId: \"#special\",\r\n      typeText: \"Special\"\r\n    },\r\n    skinny: {\r\n      shape: SkinnyShape,\r\n      shapeId: \"#skinny\",\r\n      typeText: \"Skinny\"\r\n    },\r\n    poly: {\r\n      shape: PolyShape,\r\n      shapeId: \"#poly\",\r\n      typeText: \"Poly\"\r\n    }\r\n  }\r\n};\r\n","import React, { Component } from \"react\";\nimport ReactDOM from \"react-dom\";\nimport {\n  GraphView // required\n} from \"react-digraph\";\nimport Modal from \"./Modal\";\nimport {\n  default as nodeConfig,\n  EMPTY_EDGE_TYPE,\n  CUSTOM_EMPTY_TYPE,\n  NODE_KEY,\n  POLY_TYPE,\n  SPECIAL_CHILD_SUBTYPE,\n  SPECIAL_EDGE_TYPE,\n  SPECIAL_TYPE,\n  SKINNY_TYPE\n} from \"./config\";\n\nimport \"./styles.css\";\n\nconst sample = {\n  edges: [\n    {\n      handleText: \"5\",\n      source: \"start1\",\n      target: \"a1\",\n      type: SPECIAL_EDGE_TYPE\n    },\n    {\n      handleText: \"5\",\n      source: \"a1\",\n      target: \"a2\",\n      type: SPECIAL_EDGE_TYPE\n    },\n    {\n      handleText: \"54\",\n      source: \"a2\",\n      target: \"a4\",\n      type: EMPTY_EDGE_TYPE\n    },\n    {\n      handleText: \"54\",\n      source: \"a1\",\n      target: \"a3\",\n      type: EMPTY_EDGE_TYPE\n    },\n    {\n      handleText: \"54\",\n      source: \"a3\",\n      target: \"a4\",\n      type: EMPTY_EDGE_TYPE\n    },\n    {\n      handleText: \"54\",\n      source: \"a1\",\n      target: \"a5\",\n      type: EMPTY_EDGE_TYPE\n    },\n    {\n      handleText: \"54\",\n      source: \"a4\",\n      target: \"a1\",\n      type: EMPTY_EDGE_TYPE\n    },\n    {\n      handleText: \"54\",\n      source: \"a1\",\n      target: \"a6\",\n      type: EMPTY_EDGE_TYPE\n    },\n    {\n      handleText: \"24\",\n      source: \"a1\",\n      target: \"a7\",\n      type: EMPTY_EDGE_TYPE\n    }\n  ],\n  nodes: [\n    {\n      id: \"start1\",\n      title: \"Start (0)\",\n      type: SPECIAL_TYPE\n    },\n    {\n      id: \"a1\",\n      title: \"Node A (1)\",\n      type: SPECIAL_TYPE,\n      x: 258.3976135253906,\n      y: 331.9783248901367\n    },\n    {\n      id: \"a2\",\n      subtype: SPECIAL_CHILD_SUBTYPE,\n      title: \"Node B (2)\",\n      type: CUSTOM_EMPTY_TYPE,\n      x: 593.9393920898438,\n      y: 260.6060791015625\n    },\n    {\n      id: \"a3\",\n      title: \"Node C (3)\",\n      type: CUSTOM_EMPTY_TYPE,\n      x: 237.5757598876953,\n      y: 61.81818389892578\n    },\n    {\n      id: \"a4\",\n      title: \"Node D (4)\",\n      type: CUSTOM_EMPTY_TYPE,\n      x: 600.5757598876953,\n      y: 600.81818389892578\n    },\n    {\n      id: \"a5\",\n      title: \"Node E (5)\",\n      type: null,\n      x: 50.5757598876953,\n      y: 500.81818389892578\n    },\n    {\n      id: \"a6\",\n      title: \"Node E (6)\",\n      type: SKINNY_TYPE,\n      x: 300,\n      y: 600\n    },\n    {\n      id: \"a7\",\n      title: \"Node F (7)\",\n      type: POLY_TYPE,\n      x: 0,\n      y: 300\n    }\n  ]\n};\n\nclass Graph extends Component {\n  constructor(props) {\n    super(props);\n    this.customNodeRef = React.createRef();\n    this.state = {\n      graph: sample,\n      selected: {}\n    };\n  }\n\n  renderNode = (nodeRef, data, id, selected, hovered) => {\n    return (\n      <g x=\"0\" y=\"0\" className={`shape`}>\n        {!selected ? null : (\n          <foreignObject\n            style={{ pointerEvents: \"all\" }}\n            width=\"100\"\n            height=\"50\"\n            xmlnsXlink=\"http://www.w3.org/1999/xlink\"\n          >\n            <Modal\n              id={`${id}-text`}\n              onClick={() => {\n                console.log(\"onClick text\");\n              }}\n            />\n          </foreignObject>\n        )}\n        <use\n          className={`node ${hovered ? \"hovered\" : \"\"} ${\n            selected ? \"selected\" : \"\"\n          }`}\n          x=\"-77\"\n          y=\"-77\"\n          width=\"154\"\n          height=\"154\"\n          xlinkHref={`#${data.type}`}\n        >\n          <svg viewBox=\"-27 0 154 154\" id={data.type} width=\"154\" height=\"154\">\n            <rect\n              transform=\"translate(50) rotate(45)\"\n              width=\"109\"\n              height=\"109\"\n            />\n          </svg>\n        </use>\n      </g>\n    );\n  };\n\n  // onSelectEdge = (node, event) => {\n  //   //console.log(\"test select edge\");\n  // };\n\n  // onUpdateNode = () => true;\n\n  // onDeleteNode = (...args) => {\n  //   this.setState({});\n  // };\n\n  getNodeIndex(searchNode) {\n    return this.state.graph.nodes.findIndex(node => {\n      return node[NODE_KEY] === searchNode[NODE_KEY];\n    });\n  }\n\n  // Helper to find the index of a given edge\n  getEdgeIndex(searchEdge) {\n    return this.state.graph.edges.findIndex(edge => {\n      return (\n        edge.source === searchEdge.source && edge.target === searchEdge.target\n      );\n    });\n  }\n\n  // Given a nodeKey, return the corresponding node\n  getViewNode(nodeKey) {\n    const searchNode = {};\n\n    searchNode[NODE_KEY] = nodeKey;\n    const i = this.getNodeIndex(searchNode);\n\n    return this.state.graph.nodes[i];\n  }\n\n  addStartNode = e => {\n    const graph = this.state.graph;\n\n    // using a new array like this creates a new memory reference\n    // this will force a re-render\n    graph.nodes = [\n      {\n        id: Date.now(),\n        title: \"Node A\",\n        type: SPECIAL_TYPE,\n        x: e ? e.screenX : 0, //Figure out the correct coordinates to drop\n        y: e ? e.screenY : 0\n      },\n      ...this.state.graph.nodes\n    ];\n    this.setState({\n      graph\n    });\n  };\n\n  deleteStartNode = () => {\n    const graph = this.state.graph;\n\n    graph.nodes.splice(0, 1);\n    // using a new array like this creates a new memory reference\n    // this will force a re-render\n    graph.nodes = [...this.state.graph.nodes];\n    this.setState({\n      graph\n    });\n  };\n\n  handleChange = event => {\n    this.setState(\n      {\n        totalNodes: parseInt(event.target.value || \"0\", 10)\n      },\n      this.makeItLarge\n    );\n  };\n\n  /*\n   * Handlers/Interaction\n   */\n\n  // Called by 'drag' handler, etc..\n  // to sync updates from D3 with the graph\n  onUpdateNode = viewNode => {\n    const graph = this.state.graph;\n    const i = this.getNodeIndex(viewNode);\n\n    graph.nodes[i] = viewNode;\n    this.setState({ graph });\n  };\n\n  // Node 'mouseUp' handler\n  onSelectNode = (viewNode, event) => {\n    const { id = \"\" } = event.target;\n    if (id.includes(\"text\")) {\n      document.getElementById(event.target.id).click();\n    }\n\n    // Deselect events will send Null viewNode\n    this.setState({ selected: viewNode });\n  };\n\n  // Edge 'mouseUp' handler\n  onSelectEdge = viewEdge => {\n    this.setState({ selected: viewEdge });\n  };\n\n  // Updates the graph with a new node\n  onCreateNode = (x, y) => {\n    const graph = this.state.graph;\n\n    // This is just an example - any sort of logic\n    // could be used here to determine node type\n    // There is also support for subtypes. (see 'sample' above)\n    // The subtype geometry will underlay the 'type' geometry for a node\n    const type = Math.random() < 0.25 ? SPECIAL_TYPE : CUSTOM_EMPTY_TYPE;\n\n    const viewNode = {\n      id: Date.now(),\n      title: \"\",\n      type,\n      x,\n      y\n    };\n\n    graph.nodes = [...graph.nodes, viewNode];\n    this.setState({ graph });\n  };\n\n  // Deletes a node from the graph\n  onDeleteNode = (viewNode, nodeId, nodeArr) => {\n    const graph = this.state.graph;\n    // Delete any connected edges\n    const newEdges = graph.edges.filter((edge, i) => {\n      return (\n        edge.source !== viewNode[NODE_KEY] && edge.target !== viewNode[NODE_KEY]\n      );\n    });\n\n    graph.nodes = nodeArr;\n    graph.edges = newEdges;\n\n    this.setState({ graph, selected: null });\n  };\n\n  // Creates a new node between two edges\n  onCreateEdge = (sourceViewNode, targetViewNode) => {\n    const graph = this.state.graph;\n    // This is just an example - any sort of logic\n    // could be used here to determine edge type\n    const type =\n      sourceViewNode.type === SPECIAL_TYPE\n        ? SPECIAL_EDGE_TYPE\n        : EMPTY_EDGE_TYPE;\n\n    const viewEdge = {\n      source: sourceViewNode[NODE_KEY],\n      target: targetViewNode[NODE_KEY],\n      type\n    };\n\n    // Only add the edge when the source node is not the same as the target\n    if (viewEdge.source !== viewEdge.target) {\n      graph.edges = [...graph.edges, viewEdge];\n      this.setState({\n        graph,\n        selected: viewEdge\n      });\n    }\n  };\n\n  // Called when an edge is reattached to a different target.\n  onSwapEdge = (sourceViewNode, targetViewNode, viewEdge) => {\n    const graph = this.state.graph;\n    const i = this.getEdgeIndex(viewEdge);\n    const edge = JSON.parse(JSON.stringify(graph.edges[i]));\n\n    edge.source = sourceViewNode[NODE_KEY];\n    edge.target = targetViewNode[NODE_KEY];\n    graph.edges[i] = edge;\n    // reassign the array reference if you want the graph to re-render a swapped edge\n    graph.edges = [...graph.edges];\n\n    this.setState({\n      graph,\n      selected: edge\n    });\n  };\n\n  // Called when an edge is deleted\n  onDeleteEdge = (viewEdge, edges) => {\n    const graph = this.state.graph;\n\n    graph.edges = edges;\n    this.setState({\n      graph,\n      selected: null\n    });\n  };\n\n  onUndo = () => {\n    // Not implemented\n    console.warn(\"Undo is not currently implemented in the example.\");\n    // Normally any add, remove, or update would record the action in an array.\n    // In order to undo it one would simply call the inverse of the action performed. For instance, if someone\n    // called onDeleteEdge with (viewEdge, i, edges) then an undelete would be a splicing the original viewEdge\n    // into the edges array at position i.\n  };\n\n  onCopySelected = () => {\n    if (this.state.selected.source) {\n      console.warn(\"Cannot copy selected edges, try selecting a node instead.\");\n\n      return;\n    }\n\n    const x = this.state.selected.x + 10;\n    const y = this.state.selected.y + 10;\n\n    this.setState({\n      copiedNode: { ...this.state.selected, x, y }\n    });\n  };\n\n  onPasteSelected = () => {\n    if (!this.state.copiedNode) {\n      console.warn(\n        \"No node is currently in the copy queue. Try selecting a node and copying it with Ctrl/Command-C\"\n      );\n    }\n\n    const graph = this.state.graph;\n    const newNode = { ...this.state.copiedNode, id: Date.now() };\n\n    graph.nodes = [...graph.nodes, newNode];\n    this.forceUpdate();\n  };\n\n  handleChangeLayoutEngineType = event => {\n    this.setState({\n      layoutEngineType: event.target.value\n    });\n  };\n\n  onSelectPanNode = event => {\n    if (this.GraphView) {\n      this.GraphView.panToNode(event.target.value, true);\n    }\n  };\n\n  /* Define custom graph editing methods here */\n\n  render() {\n    const nodes = this.state.graph.nodes;\n    const edges = this.state.graph.edges;\n    const selected = this.state.selected;\n\n    return (\n      <div id=\"graph\" style={{ height: \"50rem\" }}>\n        <button onClick={this.addStartNode}>Create Node</button>\n        <div draggable onDragEnd={e => this.addStartNode(e)}>\n          create on drag\n        </div>\n        <GraphView\n          showGraphControls={true}\n          gridSize=\"100rem\"\n          gridDotSize={1}\n          renderNodeText={false}\n          ref=\"GraphView\"\n          nodeKey={NODE_KEY}\n          nodes={nodes}\n          edges={edges}\n          selected={selected}\n          nodeTypes={nodeConfig.NodeTypes}\n          nodeSubtypes={nodeConfig.NodeSubtypes}\n          edgeTypes={nodeConfig.NodeTypes}\n          onSelectNode={this.onSelectNode}\n          onCreateNode={this.onCreateNode}\n          onUpdateNode={this.onUpdateNode}\n          onDeleteNode={this.onDeleteNode}\n          onSelectEdge={this.onSelectEdge}\n          onCreateEdge={this.onCreateEdge}\n          onSwapEdge={this.onSwapEdge}\n          onDeleteEdge={this.onDeleteEdge}\n          readOnly={false}\n          //renderNode={this.renderNode}\n        />\n      </div>\n    );\n  }\n}\n\nconst rootElement = document.getElementById(\"root\");\nReactDOM.render(<Graph />, rootElement);\n"],"sourceRoot":""}